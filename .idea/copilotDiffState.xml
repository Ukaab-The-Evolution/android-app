<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Ukaab/screens/Home.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Ukaab/screens/Home.tsx" />
              <option name="originalContent" value="import * as React from &quot;react&quot;;&#10;import { ScrollView, StyleSheet, View, StatusBar, Text, Dimensions } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import LinearGradient from &quot;react-native-linear-gradient&quot;;&#10;import { Theme } from &quot;../Theme&quot;;&#10;&#10;const { width } = Dimensions.get('window');&#10;&#10;interface StatData {&#10;    id: string;&#10;    title: string;&#10;    value: string;&#10;    height: number;&#10;}&#10;&#10;const statsData: StatData[] = [&#10;    { id: '1', title: 'Total Active Shipments', value: '74', height: 125 },&#10;    { id: '2', title: 'Pending Assignment', value: '4', height: 125 },&#10;    { id: '3', title: 'Delivered This Month', value: '8', height: 125 },&#10;    { id: '4', title: 'Number of Drivers', value: '19', height: 125 }&#10;];&#10;&#10;const Home = () =&gt; {&#10;    const MetricCard = ({ title, value }: { title: string; value: string }) =&gt; (&#10;        &lt;View style={styles.cardContainer}&gt;&#10;            &lt;LinearGradient&#10;                colors={[Theme.palette.secondary, Theme.palette.primary]}&#10;                start={{ x: 0, y: 0 }}&#10;                end={{ x: 1, y: 0 }}&#10;                style={styles.cardGradient}&#10;            &gt;&#10;                &lt;View style={styles.cardContent}&gt;&#10;                    &lt;View style={styles.iconContainer}&gt;&#10;                        &lt;View style={styles.iconPlaceholder} /&gt;&#10;                    &lt;/View&gt;&#10;                    &lt;View style={styles.textContainer}&gt;&#10;                        &lt;Text style={styles.cardTitle}&gt;{title}&lt;/Text&gt;&#10;                        &lt;Text style={styles.cardValue}&gt;{value}&lt;/Text&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/LinearGradient&gt;&#10;        &lt;/View&gt;&#10;    );&#10;&#10;    const ChartContainer = ({ title, children }: { title: string; children: React.ReactNode }) =&gt; (&#10;        &lt;View style={styles.chartContainer}&gt;&#10;            &lt;View style={styles.chartHeader}&gt;&#10;                &lt;Text style={styles.chartTitle}&gt;{title}&lt;/Text&gt;&#10;                &lt;View style={styles.chartIndicator} /&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.chartContent}&gt;&#10;                {children}&#10;            &lt;/View&gt;&#10;        &lt;/View&gt;&#10;    );&#10;&#10;    const WeeklyChart = () =&gt; {&#10;        // Data points for the chart line (approximated from the HTML SVG path)&#10;        const chartData = [&#10;            { day: 'Mon', value: 15, x: 40.69, y: 42.45 },&#10;            { day: 'Tue', value: 32, x: 80.27, y: 96.09 },&#10;            { day: 'Wed', value: 18, x: 119.85, y: 45.43 },&#10;            { day: 'Thu', value: 25, x: 159.43, y: 57.35 },&#10;            { day: 'Fri', value: 5, x: 199.01, y: 0.73 },&#10;            { day: 'Sat', value: 12, x: 238.58, y: 33.51 },&#10;            { day: 'Sun', value: 22, x: 278.16, y: 81.19 }&#10;        ];&#10;&#10;        return (&#10;            &lt;View style={styles.weeklyChartContainer}&gt;&#10;                {/* Main chart area */}&#10;                &lt;View style={styles.chartArea}&gt;&#10;                    {/* Y-axis */}&#10;                    &lt;View style={styles.yAxis} /&gt;&#10;&#10;                    {/* Y-axis labels and tick marks */}&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 6.15, top: 1.06 }]}&gt;40&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.33, top: 3.73 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 8.20, top: 27.48 }]}&gt;30&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.34, top: 33.53 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 8.20, top: 57.06 }]}&gt;20&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.34, top: 63.33 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 8.20, top: 87.71 }]}&gt;10&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.34, top: 93.13 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 21.31, top: 117.16 }]}&gt;0&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.33, top: 122.93 }]} /&gt;&#10;&#10;                    {/* Horizontal grid lines */}&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 33.53 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 63.33 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 93.13 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 122.93 }]} /&gt;&#10;&#10;                    {/* Vertical grid lines */}&#10;                    &lt;View style={[styles.verticalGridLine, { left: 30.11, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 69.69, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 109.27, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 148.85, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 188.43, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 228.01, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 267.58, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 307.16, top: 3.73 }]} /&gt;&#10;&#10;                    {/* Chart line - simplified with data points */}&#10;                    {chartData.map((point, index) =&gt; (&#10;                        &lt;View&#10;                            key={index}&#10;                            style={[&#10;                                styles.dataPoint,&#10;                                {&#10;                                    left: point.x,&#10;                                    top: point.y + 3.73,&#10;                                }&#10;                            ]}&#10;                        /&gt;&#10;                    ))}&#10;&#10;                    {/* X-axis labels and tick marks */}&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 28.26, top: 133.74, width: 3.71 }]}&gt;0&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 30.11, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 59.44, top: 134.21, width: 25.62 }]}&gt;Monday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 69.69, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 98.15, top: 133.74, width: 22.24 }]}&gt;Tuesday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 109.27, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 133.56, top: 133.74, width: 31.04 }]}&gt;Wednesday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 148.85, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 175.92, top: 133.74, width: 25.02 }]}&gt;Thursday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 188.43, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 220.13, top: 133.74, width: 16.22 }]}&gt;Friday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 228.01, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 256, top: 133.74, width: 23.63 }]}&gt;Saturday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 267.59, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 297.20, top: 133.74, width: 24.57 }]}&gt;Sunday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 309.49, top: 122.92 }]} /&gt;&#10;&#10;                    {/* Main chart border */}&#10;                    &lt;View style={styles.chartBorder} /&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        );&#10;    };&#10;&#10;    const DriverStatusChart = () =&gt; (&#10;        &lt;View style={styles.pieChartContainer}&gt;&#10;            {/* Pie chart placeholder */}&#10;            &lt;View style={styles.pieChartPlaceholder}&gt;&#10;                &lt;View style={styles.pieCenter}&gt;&#10;                    &lt;View style={[styles.pieSegment, styles.enrouteSegment]} /&gt;&#10;                    &lt;View style={[styles.pieSegment, styles.idleSegment]} /&gt;&#10;                    &lt;View style={[styles.pieSegment, styles.pendingSegment]} /&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;&#10;            {/* Legend */}&#10;&#10;        &lt;/View&gt;&#10;    );&#10;&#10;    return (&#10;        &lt;SafeAreaView style={styles.container}&gt;&#10;            &lt;StatusBar backgroundColor={Theme.palette.primary} barStyle=&quot;light-content&quot; /&gt;&#10;            &lt;ScrollView&#10;                style={styles.scrollContainer}&#10;                contentContainerStyle={styles.contentContainer}&#10;                showsVerticalScrollIndicator={false}&#10;            &gt;&#10;                {/* Metrics Cards */}&#10;                &lt;View style={styles.metricsContainer}&gt;&#10;                    {statsData.map((item) =&gt; (&#10;                        &lt;MetricCard&#10;                            key={item.id}&#10;                            title={item.title}&#10;                            value={item.value}&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/View&gt;&#10;&#10;                {/* Weekly Shipments Chart */}&#10;                &lt;ChartContainer title=&quot;Weekly Shipments Chart               This Week&quot;&gt;&#10;                    &lt;WeeklyChart /&gt;&#10;                &lt;/ChartContainer&gt;&#10;&#10;                {/* Driver Status Chart */}&#10;                &lt;ChartContainer title=&quot;Drivers Status&quot;&gt;&#10;                    &lt;DriverStatusChart /&gt;&#10;                &lt;/ChartContainer&gt;&#10;&#10;                {/* Bottom spacing for navigation */}&#10;                &lt;View style={styles.bottomSpacing} /&gt;&#10;            &lt;/ScrollView&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    container: {&#10;        flex: 1,&#10;        backgroundColor: '#F8F9FA',&#10;    },&#10;    scrollContainer: {&#10;        flex: 1,&#10;    },&#10;    contentContainer: {&#10;        paddingHorizontal: 28,&#10;        paddingTop: 20,&#10;        paddingBottom: 20,&#10;    },&#10;&#10;    // Metrics Cards&#10;    metricsContainer: {&#10;        gap: 10,&#10;        marginBottom: 23,&#10;    },&#10;    cardContainer: {&#10;        borderRadius: 10,&#10;        elevation: 4,&#10;        shadowColor: '#000',&#10;        shadowOffset: {&#10;            width: 0,&#10;            height: 4,&#10;        },&#10;        shadowOpacity: 0.25,&#10;        shadowRadius: 4,&#10;    },&#10;    cardGradient: {&#10;        borderRadius: 10,&#10;        padding: 19,&#10;        minHeight: 125,&#10;    },&#10;    cardContent: {&#10;        flexDirection: 'row',&#10;        alignItems: 'center',&#10;        gap: 18,&#10;    },&#10;    iconContainer: {&#10;        width: 70,&#10;        height: 65,&#10;        backgroundColor: 'white',&#10;        borderRadius: 20,&#10;        justifyContent: 'center',&#10;        alignItems: 'center',&#10;    },&#10;    iconPlaceholder: {&#10;        width: 48,&#10;        height: 48,&#10;        backgroundColor: Theme.palette.primary,&#10;        borderRadius: 24,&#10;    },&#10;    textContainer: {&#10;        flex: 1,&#10;        gap: 13,&#10;    },&#10;    cardTitle: {&#10;        color: 'white',&#10;        fontSize: 20,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;    },&#10;    cardValue: {&#10;        color: 'white',&#10;        fontSize: 40,&#10;        fontFamily: 'Inter-Bold',&#10;        fontWeight: '700',&#10;    },&#10;&#10;    // Charts&#10;    chartContainer: {&#10;        backgroundColor: 'white',&#10;        borderRadius: 10,&#10;        paddingTop: 5,&#10;        paddingBottom: 5,&#10;        marginBottom: 23,&#10;        elevation: 4,&#10;        shadowColor: '#000',&#10;        shadowOffset: {&#10;            width: 0,&#10;            height: 4,&#10;        },&#10;        shadowOpacity: 0.33,&#10;        shadowRadius: 4,&#10;    },&#10;    chartHeader: {&#10;        flexDirection: 'row',&#10;        alignItems: 'flex-end',&#10;        justifyContent: 'center',&#10;        gap: 7,&#10;        paddingHorizontal: 20,&#10;        marginBottom: 8,&#10;    },&#10;    chartTitle: {&#10;        color: '#223931',&#10;        fontSize: 12,&#10;        fontFamily: 'Poppins-Bold',&#10;        fontWeight: '700',&#10;        textAlign: 'center',&#10;    },&#10;    chartIndicator: {&#10;        width: 23,&#10;        height: 19,&#10;        backgroundColor: 'rgba(34, 57, 49, 0.36)',&#10;        borderRadius: 5,&#10;    },&#10;    chartContent: {&#10;        paddingHorizontal: 10,&#10;    },&#10;&#10;    // Weekly Chart&#10;    weeklyChartContainer: {&#10;        height: 149,&#10;        width: '100%',&#10;    },&#10;    chartArea: {&#10;        height: 149,&#10;        position: 'relative',&#10;        overflow: 'hidden',&#10;    },&#10;    yAxis: {&#10;        position: 'absolute',&#10;        left: 30.11,&#10;        top: 3.73,&#10;        width: 2,&#10;        height: 120,&#10;        backgroundColor: 'black',&#10;    },&#10;    yAxisLabel: {&#10;        position: 'absolute',&#10;        fontSize: 12,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;        color: 'black',&#10;        textAlign: 'right',&#10;    },&#10;    yAxisTick: {&#10;        position: 'absolute',&#10;        width: 4,&#10;        height: 2,&#10;        backgroundColor: 'black',&#10;    },&#10;    xAxisLabel: {&#10;        position: 'absolute',&#10;        fontSize: 12,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;        color: 'black',&#10;        textAlign: 'center',&#10;    },&#10;    xAxisTick: {&#10;        position: 'absolute',&#10;        width: 2,&#10;        height: 6,&#10;        backgroundColor: 'black',&#10;    },&#10;    gridLine: {&#10;        position: 'absolute',&#10;        width: 278,&#10;        height: 2,&#10;        backgroundColor: '#CCCCCC',&#10;    },&#10;    verticalGridLine: {&#10;        position: 'absolute',&#10;        width: 2,&#10;        height: 120,&#10;        backgroundColor: '#CCCCCC',&#10;    },&#10;    dataPoint: {&#10;        position: 'absolute',&#10;        width: 6,&#10;        height: 6,&#10;        backgroundColor: '#269C0B',&#10;        borderRadius: 3,&#10;        marginLeft: -3,&#10;        marginTop: -3,&#10;    },&#10;    chartBorder: {&#10;        position: 'absolute',&#10;        left: 30.11,&#10;        top: 3.73,&#10;        width: 278,&#10;        height: 120,&#10;        borderWidth: 0.5,&#10;        borderColor: '#269C0B',&#10;    },&#10;&#10;    // Driver Status Chart&#10;    pieChartContainer: {&#10;        height: 240,&#10;        alignItems: 'center',&#10;        justifyContent: 'center',&#10;    },&#10;    pieChartPlaceholder: {&#10;        width: 120,&#10;        height: 120,&#10;        marginBottom: 20,&#10;        justifyContent: 'center',&#10;        alignItems: 'center',&#10;    },&#10;    pieCenter: {&#10;        width: 120,&#10;        height: 120,&#10;        borderRadius: 60,&#10;        backgroundColor: '#F0F0F0',&#10;        position: 'relative',&#10;        overflow: 'hidden',&#10;    },&#10;    pieSegment: {&#10;        position: 'absolute',&#10;    },&#10;    enrouteSegment: {&#10;        width: 120,&#10;        height: 60,&#10;        backgroundColor: '#16A34A',&#10;        borderTopLeftRadius: 60,&#10;        borderTopRightRadius: 60,&#10;        top: 0,&#10;        left: 0,&#10;    },&#10;    idleSegment: {&#10;        width: 60,&#10;        height: 60,&#10;        backgroundColor: '#3B5B22',&#10;        borderBottomRightRadius: 60,&#10;        bottom: 0,&#10;        right: 0,&#10;    },&#10;    pendingSegment: {&#10;        width: 60,&#10;        height: 60,&#10;        backgroundColor: '#406C5D',&#10;        borderBottomLeftRadius: 60,&#10;        bottom: 0,&#10;        left: 0,&#10;    },&#10;    legendContainer: {&#10;        alignItems: 'flex-start',&#10;        gap: 8,&#10;    },&#10;    legendItem: {&#10;        flexDirection: 'row',&#10;        alignItems: 'center',&#10;        gap: 8,&#10;    },&#10;    legendColor: {&#10;        width: 12,&#10;        height: 12,&#10;        borderRadius: 6,&#10;    },&#10;    legendText: {&#10;        fontSize: 12,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;        color: 'black',&#10;    },&#10;&#10;    // Bottom spacing&#10;    bottomSpacing: {&#10;        height: 100,&#10;    },&#10;});&#10;&#10;export default Home;&#10;" />
              <option name="updatedContent" value="import * as React from &quot;react&quot;;&#10;import { ScrollView, StyleSheet, View, StatusBar, Text, Dimensions, TouchableOpacity } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import LinearGradient from &quot;react-native-linear-gradient&quot;;&#10;import { useNavigation } from &quot;@react-navigation/native&quot;;&#10;import { StackNavigationProp } from &quot;@react-navigation/stack&quot;;&#10;import { Theme } from &quot;../Theme&quot;;&#10;&#10;const { width } = Dimensions.get('window');&#10;&#10;// Type definitions for navigation&#10;type RootStackParamList = {&#10;  Loads: undefined;&#10;  LoadRequests: undefined;&#10;  AcceptedLoads: undefined;&#10;  DetailedView: undefined;&#10;  SelectTruck: undefined;&#10;  SelectDriver: undefined;&#10;  SelectPage: undefined;&#10;  Trucks: undefined;&#10;  Drivers: undefined;&#10;};&#10;&#10;type HomeScreenNavigationProp = StackNavigationProp&lt;RootStackParamList&gt;;&#10;&#10;// Interface for dashboard statistics data&#10;interface StatData {&#10;    id: string;&#10;    title: string;&#10;    value: string;&#10;    height: number;&#10;}&#10;&#10;// Mock data for dashboard statistics cards&#10;// These values would typically come from an API in a real application&#10;const statsData: StatData[] = [&#10;    { id: '1', title: 'Total Active Shipments', value: '74', height: 125 },&#10;    { id: '2', title: 'Pending Assignment', value: '4', height: 125 },&#10;    { id: '3', title: 'Delivered This Month', value: '8', height: 125 },&#10;    { id: '4', title: 'Number of Drivers', value: '19', height: 125 }&#10;];&#10;&#10;/**&#10; * Home Screen Component&#10; * &#10; * Main dashboard screen displaying:&#10; * - Key performance metrics in card format&#10; * - Weekly shipments chart visualization&#10; * - Driver status distribution chart&#10; * - Quick navigation to other sections&#10; */&#10;const Home = () =&gt; {&#10;    const navigation = useNavigation&lt;HomeScreenNavigationProp&gt;();&#10;&#10;    /**&#10;     * Navigation handlers for quick access to different sections&#10;     */&#10;    const navigateToLoads = () =&gt; {&#10;        navigation.navigate('Loads');&#10;    };&#10;&#10;    const navigateToTrucks = () =&gt; {&#10;        navigation.navigate('Trucks');&#10;    };&#10;&#10;    const navigateToDrivers = () =&gt; {&#10;        navigation.navigate('Drivers');&#10;    };&#10;&#10;    /**&#10;     * Metric Card Component&#10;     * Displays individual KPI metrics with gradient background&#10;     * &#10;     * @param title - The metric title/description&#10;     * @param value - The metric value to display&#10;     */&#10;    const MetricCard = ({ title, value }: { title: string; value: string }) =&gt; (&#10;        &lt;TouchableOpacity &#10;            style={styles.cardContainer}&#10;            onPress={() =&gt; {&#10;                // Navigate based on the metric type&#10;                if (title.includes('Shipments') || title.includes('Assignment')) {&#10;                    navigateToLoads();&#10;                } else if (title.includes('Drivers')) {&#10;                    navigateToDrivers();&#10;                }&#10;            }}&#10;            activeOpacity={0.8}&#10;        &gt;&#10;            &lt;LinearGradient&#10;                colors={[Theme.palette.secondary, Theme.palette.primary]}&#10;                start={{ x: 0, y: 0 }}&#10;                end={{ x: 1, y: 0 }}&#10;                style={styles.cardGradient}&#10;            &gt;&#10;                &lt;View style={styles.cardContent}&gt;&#10;                    {/* Icon container with placeholder icon */}&#10;                    &lt;View style={styles.iconContainer}&gt;&#10;                        &lt;View style={styles.iconPlaceholder} /&gt;&#10;                    &lt;/View&gt;&#10;                    {/* Text content */}&#10;                    &lt;View style={styles.textContainer}&gt;&#10;                        &lt;Text style={styles.cardTitle}&gt;{title}&lt;/Text&gt;&#10;                        &lt;Text style={styles.cardValue}&gt;{value}&lt;/Text&gt;&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/LinearGradient&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;    );&#10;&#10;    /**&#10;     * Chart Container Component&#10;     * Wrapper component for chart sections with consistent styling&#10;     * &#10;     * @param title - Chart section title&#10;     * @param children - Chart content to render&#10;     */&#10;    const ChartContainer = ({ title, children }: { title: string; children: React.ReactNode }) =&gt; (&#10;        &lt;View style={styles.chartContainer}&gt;&#10;            &lt;View style={styles.chartHeader}&gt;&#10;                &lt;Text style={styles.chartTitle}&gt;{title}&lt;/Text&gt;&#10;                &lt;View style={styles.chartIndicator} /&gt;&#10;            &lt;/View&gt;&#10;            &lt;View style={styles.chartContent}&gt;&#10;                {children}&#10;            &lt;/View&gt;&#10;        &lt;/View&gt;&#10;    );&#10;&#10;    /**&#10;     * Weekly Chart Component&#10;     * Displays a line chart showing weekly shipment trends&#10;     * Note: This is a simplified chart implementation using React Native Views&#10;     * For production, consider using a charting library like react-native-chart-kit&#10;     */&#10;    const WeeklyChart = () =&gt; {&#10;        // Mock data points for the weekly chart&#10;        // In a real app, this would come from an analytics API&#10;        const chartData = [&#10;            { day: 'Mon', value: 15, x: 40.69, y: 42.45 },&#10;            { day: 'Tue', value: 32, x: 80.27, y: 96.09 },&#10;            { day: 'Wed', value: 18, x: 119.85, y: 45.43 },&#10;            { day: 'Thu', value: 25, x: 159.43, y: 57.35 },&#10;            { day: 'Fri', value: 5, x: 199.01, y: 0.73 },&#10;            { day: 'Sat', value: 12, x: 238.58, y: 33.51 },&#10;            { day: 'Sun', value: 22, x: 278.16, y: 81.19 }&#10;        ];&#10;&#10;        return (&#10;            &lt;TouchableOpacity &#10;                style={styles.weeklyChartContainer}&#10;                onPress={navigateToLoads}&#10;                activeOpacity={0.9}&#10;            &gt;&#10;                {/* Main chart rendering area */}&#10;                &lt;View style={styles.chartArea}&gt;&#10;                    {/* Y-axis line */}&#10;                    &lt;View style={styles.yAxis} /&gt;&#10;&#10;                    {/* Y-axis labels and tick marks */}&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 6.15, top: 1.06 }]}&gt;40&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.33, top: 3.73 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 8.20, top: 27.48 }]}&gt;30&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.34, top: 33.53 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 8.20, top: 57.06 }]}&gt;20&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.34, top: 63.33 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 8.20, top: 87.71 }]}&gt;10&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.34, top: 93.13 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.yAxisLabel, { left: 21.31, top: 117.16 }]}&gt;0&lt;/Text&gt;&#10;                    &lt;View style={[styles.yAxisTick, { left: 27.33, top: 122.93 }]} /&gt;&#10;&#10;                    {/* Horizontal grid lines for better readability */}&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 33.53 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 63.33 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 93.13 }]} /&gt;&#10;                    &lt;View style={[styles.gridLine, { left: 30.11, top: 122.93 }]} /&gt;&#10;&#10;                    {/* Vertical grid lines for days of the week */}&#10;                    &lt;View style={[styles.verticalGridLine, { left: 30.11, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 69.69, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 109.27, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 148.85, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 188.43, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 228.01, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 267.58, top: 3.73 }]} /&gt;&#10;                    &lt;View style={[styles.verticalGridLine, { left: 307.16, top: 3.73 }]} /&gt;&#10;&#10;                    {/* Data points representing daily shipment counts */}&#10;                    {chartData.map((point, index) =&gt; (&#10;                        &lt;View&#10;                            key={index}&#10;                            style={[&#10;                                styles.dataPoint,&#10;                                {&#10;                                    left: point.x,&#10;                                    top: point.y + 3.73,&#10;                                }&#10;                            ]}&#10;                        /&gt;&#10;                    ))}&#10;&#10;                    {/* X-axis labels for days of the week */}&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 28.26, top: 133.74, width: 3.71 }]}&gt;0&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 30.11, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 59.44, top: 134.21, width: 25.62 }]}&gt;Monday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 69.69, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 98.15, top: 133.74, width: 22.24 }]}&gt;Tuesday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 109.27, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 133.56, top: 133.74, width: 31.04 }]}&gt;Wednesday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 148.85, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 175.92, top: 133.74, width: 25.02 }]}&gt;Thursday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 188.43, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 220.13, top: 133.74, width: 16.22 }]}&gt;Friday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 228.01, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 256, top: 133.74, width: 23.63 }]}&gt;Saturday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 267.59, top: 122.92 }]} /&gt;&#10;&#10;                    &lt;Text style={[styles.xAxisLabel, { left: 297.20, top: 133.74, width: 24.57 }]}&gt;Sunday&lt;/Text&gt;&#10;                    &lt;View style={[styles.xAxisTick, { left: 309.49, top: 122.92 }]} /&gt;&#10;&#10;                    {/* Chart border */}&#10;                    &lt;View style={styles.chartBorder} /&gt;&#10;                &lt;/View&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;        );&#10;    };&#10;&#10;    /**&#10;     * Driver Status Chart Component&#10;     * Displays a pie chart showing driver status distribution&#10;     * Shows the breakdown of drivers by their current status (En Route, Idle, Pending)&#10;     */&#10;    const DriverStatusChart = () =&gt; (&#10;        &lt;TouchableOpacity &#10;            style={styles.pieChartContainer}&#10;            onPress={navigateToDrivers}&#10;            activeOpacity={0.9}&#10;        &gt;&#10;            {/* Simplified pie chart using segmented circles */}&#10;            &lt;View style={styles.pieChartPlaceholder}&gt;&#10;                &lt;View style={styles.pieCenter}&gt;&#10;                    {/* En Route drivers segment (green) */}&#10;                    &lt;View style={[styles.pieSegment, styles.enrouteSegment]} /&gt;&#10;                    {/* Idle drivers segment (dark green) */}&#10;                    &lt;View style={[styles.pieSegment, styles.idleSegment]} /&gt;&#10;                    {/* Pending drivers segment (teal) */}&#10;                    &lt;View style={[styles.pieSegment, styles.pendingSegment]} /&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;&#10;            {/* Legend for the pie chart */}&#10;            &lt;View style={styles.legendContainer}&gt;&#10;                &lt;View style={styles.legendItem}&gt;&#10;                    &lt;View style={[styles.legendColor, { backgroundColor: '#16A34A' }]} /&gt;&#10;                    &lt;Text style={styles.legendText}&gt;En Route (60%)&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={styles.legendItem}&gt;&#10;                    &lt;View style={[styles.legendColor, { backgroundColor: '#3B5B22' }]} /&gt;&#10;                    &lt;Text style={styles.legendText}&gt;Idle (25%)&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;                &lt;View style={styles.legendItem}&gt;&#10;                    &lt;View style={[styles.legendColor, { backgroundColor: '#406C5D' }]} /&gt;&#10;                    &lt;Text style={styles.legendText}&gt;Pending (15%)&lt;/Text&gt;&#10;                &lt;/View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;    );&#10;&#10;    return (&#10;        &lt;SafeAreaView style={styles.container}&gt;&#10;            {/* Status bar configuration for consistent theming */}&#10;            &lt;StatusBar backgroundColor={Theme.palette.primary} barStyle=&quot;light-content&quot; /&gt;&#10;            &#10;            &lt;ScrollView&#10;                style={styles.scrollContainer}&#10;                contentContainerStyle={styles.contentContainer}&#10;                showsVerticalScrollIndicator={false}&#10;            &gt;&#10;                {/* Dashboard Metrics Section */}&#10;                &lt;View style={styles.metricsContainer}&gt;&#10;                    {statsData.map((item) =&gt; (&#10;                        &lt;MetricCard&#10;                            key={item.id}&#10;                            title={item.title}&#10;                            value={item.value}&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/View&gt;&#10;&#10;                {/* Weekly Shipments Analytics Chart */}&#10;                &lt;ChartContainer title=&quot;Weekly Shipments Chart               This Week&quot;&gt;&#10;                    &lt;WeeklyChart /&gt;&#10;                &lt;/ChartContainer&gt;&#10;&#10;                {/* Driver Status Distribution Chart */}&#10;                &lt;ChartContainer title=&quot;Drivers Status&quot;&gt;&#10;                    &lt;DriverStatusChart /&gt;&#10;                &lt;/ChartContainer&gt;&#10;&#10;                {/* Bottom spacing to account for bottom tab navigation */}&#10;                &lt;View style={styles.bottomSpacing} /&gt;&#10;            &lt;/ScrollView&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;// Comprehensive StyleSheet with organized sections&#10;const styles = StyleSheet.create({&#10;    // Main container styles&#10;    container: {&#10;        flex: 1,&#10;        backgroundColor: '#F8F9FA',&#10;    },&#10;    scrollContainer: {&#10;        flex: 1,&#10;    },&#10;    contentContainer: {&#10;        paddingHorizontal: 28,&#10;        paddingTop: 20,&#10;        paddingBottom: 20,&#10;    },&#10;&#10;    // Metrics Cards Section&#10;    metricsContainer: {&#10;        gap: 10,&#10;        marginBottom: 23,&#10;    },&#10;    cardContainer: {&#10;        borderRadius: 10,&#10;        elevation: 4, // Android shadow&#10;        shadowColor: '#000', // iOS shadow&#10;        shadowOffset: {&#10;            width: 0,&#10;            height: 4,&#10;        },&#10;        shadowOpacity: 0.25,&#10;        shadowRadius: 4,&#10;    },&#10;    cardGradient: {&#10;        borderRadius: 10,&#10;        padding: 19,&#10;        minHeight: 125,&#10;    },&#10;    cardContent: {&#10;        flexDirection: 'row',&#10;        alignItems: 'center',&#10;        gap: 18,&#10;    },&#10;    iconContainer: {&#10;        width: 70,&#10;        height: 65,&#10;        backgroundColor: 'white',&#10;        borderRadius: 20,&#10;        justifyContent: 'center',&#10;        alignItems: 'center',&#10;    },&#10;    iconPlaceholder: {&#10;        width: 48,&#10;        height: 48,&#10;        backgroundColor: Theme.palette.primary,&#10;        borderRadius: 24,&#10;    },&#10;    textContainer: {&#10;        flex: 1,&#10;        gap: 13,&#10;    },&#10;    cardTitle: {&#10;        color: 'white',&#10;        fontSize: 20,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;    },&#10;    cardValue: {&#10;        color: 'white',&#10;        fontSize: 40,&#10;        fontFamily: 'Inter-Bold',&#10;        fontWeight: '700',&#10;    },&#10;&#10;    // Chart Container Styles&#10;    chartContainer: {&#10;        backgroundColor: 'white',&#10;        borderRadius: 10,&#10;        paddingTop: 5,&#10;        paddingBottom: 5,&#10;        marginBottom: 23,&#10;        elevation: 4, // Android shadow&#10;        shadowColor: '#000', // iOS shadow&#10;        shadowOffset: {&#10;            width: 0,&#10;            height: 4,&#10;        },&#10;        shadowOpacity: 0.33,&#10;        shadowRadius: 4,&#10;    },&#10;    chartHeader: {&#10;        flexDirection: 'row',&#10;        alignItems: 'flex-end',&#10;        justifyContent: 'center',&#10;        gap: 7,&#10;        paddingHorizontal: 20,&#10;        marginBottom: 8,&#10;    },&#10;    chartTitle: {&#10;        color: '#223931',&#10;        fontSize: 12,&#10;        fontFamily: 'Poppins-Bold',&#10;        fontWeight: '700',&#10;        textAlign: 'center',&#10;    },&#10;    chartIndicator: {&#10;        width: 23,&#10;        height: 19,&#10;        backgroundColor: 'rgba(34, 57, 49, 0.36)',&#10;        borderRadius: 5,&#10;    },&#10;    chartContent: {&#10;        paddingHorizontal: 10,&#10;    },&#10;&#10;    // Weekly Chart Styles&#10;    weeklyChartContainer: {&#10;        height: 149,&#10;        width: '100%',&#10;    },&#10;    chartArea: {&#10;        height: 149,&#10;        position: 'relative',&#10;        overflow: 'hidden',&#10;    },&#10;    yAxis: {&#10;        position: 'absolute',&#10;        left: 30.11,&#10;        top: 3.73,&#10;        width: 2,&#10;        height: 120,&#10;        backgroundColor: 'black',&#10;    },&#10;    yAxisLabel: {&#10;        position: 'absolute',&#10;        fontSize: 12,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;        color: 'black',&#10;        textAlign: 'right',&#10;    },&#10;    yAxisTick: {&#10;        position: 'absolute',&#10;        width: 4,&#10;        height: 2,&#10;        backgroundColor: 'black',&#10;    },&#10;    xAxisLabel: {&#10;        position: 'absolute',&#10;        fontSize: 12,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;        color: 'black',&#10;        textAlign: 'center',&#10;    },&#10;    xAxisTick: {&#10;        position: 'absolute',&#10;        width: 2,&#10;        height: 6,&#10;        backgroundColor: 'black',&#10;    },&#10;    gridLine: {&#10;        position: 'absolute',&#10;        width: 278,&#10;        height: 2,&#10;        backgroundColor: '#CCCCCC',&#10;    },&#10;    verticalGridLine: {&#10;        position: 'absolute',&#10;        width: 2,&#10;        height: 120,&#10;        backgroundColor: '#CCCCCC',&#10;    },&#10;    dataPoint: {&#10;        position: 'absolute',&#10;        width: 6,&#10;        height: 6,&#10;        backgroundColor: '#269C0B',&#10;        borderRadius: 3,&#10;        marginLeft: -3,&#10;        marginTop: -3,&#10;    },&#10;    chartBorder: {&#10;        position: 'absolute',&#10;        left: 30.11,&#10;        top: 3.73,&#10;        width: 278,&#10;        height: 120,&#10;        borderWidth: 0.5,&#10;        borderColor: '#269C0B',&#10;    },&#10;&#10;    // Driver Status Pie Chart Styles&#10;    pieChartContainer: {&#10;        height: 240,&#10;        alignItems: 'center',&#10;        justifyContent: 'center',&#10;    },&#10;    pieChartPlaceholder: {&#10;        width: 120,&#10;        height: 120,&#10;        marginBottom: 20,&#10;        justifyContent: 'center',&#10;        alignItems: 'center',&#10;    },&#10;    pieCenter: {&#10;        width: 120,&#10;        height: 120,&#10;        borderRadius: 60,&#10;        backgroundColor: '#F0F0F0',&#10;        position: 'relative',&#10;        overflow: 'hidden',&#10;    },&#10;    pieSegment: {&#10;        position: 'absolute',&#10;    },&#10;    enrouteSegment: {&#10;        width: 120,&#10;        height: 60,&#10;        backgroundColor: '#16A34A',&#10;        borderTopLeftRadius: 60,&#10;        borderTopRightRadius: 60,&#10;        top: 0,&#10;        left: 0,&#10;    },&#10;    idleSegment: {&#10;        width: 60,&#10;        height: 60,&#10;        backgroundColor: '#3B5B22',&#10;        borderBottomRightRadius: 60,&#10;        bottom: 0,&#10;        right: 0,&#10;    },&#10;    pendingSegment: {&#10;        width: 60,&#10;        height: 60,&#10;        backgroundColor: '#406C5D',&#10;        borderBottomLeftRadius: 60,&#10;        bottom: 0,&#10;        left: 0,&#10;    },&#10;    &#10;    // Legend Styles&#10;    legendContainer: {&#10;        alignItems: 'flex-start',&#10;        gap: 8,&#10;    },&#10;    legendItem: {&#10;        flexDirection: 'row',&#10;        alignItems: 'center',&#10;        gap: 8,&#10;    },&#10;    legendColor: {&#10;        width: 12,&#10;        height: 12,&#10;        borderRadius: 6,&#10;    },&#10;    legendText: {&#10;        fontSize: 12,&#10;        fontFamily: 'Inter-Regular',&#10;        fontWeight: '400',&#10;        color: 'black',&#10;    },&#10;&#10;    // Utility Styles&#10;    bottomSpacing: {&#10;        height: 100, // Space for bottom navigation&#10;    },&#10;});&#10;&#10;export default Home;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>