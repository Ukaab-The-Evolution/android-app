pipeline {
  agent any

  environment {
    GITHUB_CREDENTIALS = 'github-pat'
  }

  parameters {
    string(name: 'BUILD_TYPE', defaultValue: 'Release', description: 'Build type: Debug or Release')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build via Docker') {
      steps {
        script {
          // Get the current user ID for file permissions
          def userId = sh(script: "id -u || echo 1000", returnStdout: true).trim()

          // Build Docker image using Ukaab as context
          docker.build(
            "android-build:${params.BUILD_TYPE}",
            "-f Ukaab/Dockerfile --build-arg LOCAL_USER_ID=${userId} Ukaab"
          ).inside("-e LOCAL_USER_ID=${userId}") {

            // Run Gradle build based on build type
            if (params.BUILD_TYPE == "Release") {
              sh "cd android && ./gradlew assembleRelease"
            } else {
              sh "cd android && ./gradlew assembleDebug"
            }
          }
        }
      }
    }

    stage('Archive APK') {
      steps {
        archiveArtifacts artifacts: 'android/app/build/outputs/apk/**/*.apk', fingerprint: true
      }
    }
  }

  post {
    success {
      githubNotify context: 'continuous-integration/jenkins/pr-head',
                   status:  'SUCCESS',
                   credentialsId: env.GITHUB_CREDENTIALS
    }
    failure {
      githubNotify context: 'continuous-integration/jenkins/pr-head',
                   status:  'FAILURE',
                   credentialsId: env.GITHUB_CREDENTIALS
    }
    always {
      cleanWs()
    }
  }
}
